<template>
  <view class="order_container">
    <tabs :tabList.sync="tabList" :currentTab.sync="currentTab"></tabs>
    <scroll-view @scrolltolower="scrollToLower" scroll-y="{{ true }}" style="height: {{ systemInfo.windowHeight }}px" class="order_content">
      <order_item :orderList.sync='orderList'></order_item>
      <loading :show.sync="loadShow" :message.sync="message"></loading>
      <place_holder :show.sync="placeHolderShow" :message.sync="placeHolderMessage"></place_holder>
      <toast :isShow.sync="toastShow" :text.sync="toastText"></toast>
    </scroll-view>
  </view>
</template>

<script>
    import wepy from 'wepy'
    import OrderItem from './order_item'
    import Tabs from '@/components/tabs'
    import Loading from '@/components/loading'
    import PlaceHolder from '@/components/place_holder'
    import Toast from '@/components/toast'
    import { request } from '@/common/utils.js'
    import { errorCode } from '@/common/constants.js'

    export default class Order extends wepy.page {
        config = {
            navigationBarTitleText: '我的订单',
            enablePullDownRefresh: true
        }

        components = {
            order_item: OrderItem,
            tabs: Tabs,
            loading: Loading,
            place_holder: PlaceHolder,
            toast: Toast
        }

        data = {
            systemInfo: {},
            currentTab: 0,
            allOrders: [], // 所有订单数据源，渲染数据由此过滤产生
            orderList: [],
            tabList: [
                '全部订单',
                '已完成',
                '待支付',
                '已取消'
            ],
            loadShow: false, // 默认不显示loading
            message: '加载中',
            placeHolderShow: false,
            placeHolderMessage: '客官，再往下拉也没有数据啦！',
            toastText: '服务器开小差了',
            toastShow: false
        }

        methods = {
            switchTab(index) {
                this.currentTab = index
            },
            async scrollToLower() {
                await this.moreOrders()
            }
        }

        events = {
            'switch-tab': index => {
                this.refreshOrderList(index)
                this.currentTab = index
                this.$apply()
            }
        }

        watch = {
            allOrders() {
                this.refreshOrderList(this.currentTab, true)
            }
        }

        refreshOrderList(index, updater = false) {
            if (!updater && (this.currentTab === index)) {
                return false
            }

            if (index === 0) {
                this.orderList = this.allOrders
                return
            }
            this.orderList = this.allOrders.filter(current => current.order_status === this.tabList[index])
        }

        async moreOrders() {
            try {
                if (this.placeHolderShow) {
                    return null
                }

                this.loadShow = true
                const result = await request({
                    url: '/order_list',
                    options: {
                        method: 'get'
                    }
                })

                const {
                    data: {
                        order_list: orderList,
                        noMoreData = false
                    },
                    statusCode
                } = result

                if (errorCode.includes(statusCode)) {
                    this.loadShow = false
                    this.$apply()
                    return
                }

                this.allOrders = this.allOrders.concat(orderList.map(current => Object.assign({}, current, {
                    order_price: current.order_price.toFixed(2)
                })))

                this.loadShow = false
                /**
                * 如果没有更多数据了显示place_holder组件，接口待优化
                */
                if (noMoreData) {
                    this.placeHolderShow = true
                }
                this.$apply()
            } catch (error) {
                this.toastShow = true
                this.loadShow = false
                this.$apply()
                setTimeout(() => {
                    this.toastShow = false
                    this.$apply()
                }, 1000)
                console.log(error)
            }
        }

        async onLoad() {
            const systemInfo = wepy.getStorageSync('systemInfo')
            console.log(systemInfo)
            this.systemInfo = systemInfo
            await this.moreOrders()
        }

        async onPullDownRefresh() {
            const {
                data: {
                    order_list: orderList
                },
                statusCode
            } = await request({
                url: '/order_list',
                options: {
                    method: 'get'
                }
            })

            wepy.stopPullDownRefresh()

            if (errorCode.includes(statusCode)) {
                return
            }

            this.allOrders = orderList.map(current => Object.assign(
                {},
                current,
                {
                    order_price: current.order_price.toFixed(2)
                }))

            this.placeHolderShow = false
            this.$apply()
        }
    }
</script>

<style lang='less'>
  @import '../../common/common.less';

  .order_container {
    display: flex;
    flex-direction: column;
    height: 100%;
  }


</style>
